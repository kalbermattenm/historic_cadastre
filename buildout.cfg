[buildout]
extends = versions.cfg

index = http://pypi.camptocamp.net/pypi/

develop-eggs-directory = buildout/develop-eggs
eggs-directory = buildout/eggs
parts-directory = buildout/parts
bin-directory = buildout/bin

versions = versions
 
parts =
    pyramid
    modwsgi
    pil_patch
    template
    jsbuild
    print-template
    print-war
    modwsgi-patch

develop = .

show-picked-versions = true

newest = false
prefer-final = true

[vars]

instanceid = overwrite_me
serverbase = /${vars:instanceid}
egg = historic_cadastre
project = historic_cadastre

interpreter = py

# default language (currently only fr)
default_language = fr

# database user
dbuser = overwriteme
# database password
dbpassword = overwriteme
# database host
dbhost = overwriteme
# database port
dbport = overwriteme
# database name
db = overwrite_me

# host serving the application
host = localhost
# port for the waitress web server
waitress_port = 6543

image_server_graphique = overwriteme
image_server_mutation = overwriteme
image_server_servitudes = overwriteme
image_server_cadastre_graphique = overwriteme


intranet_code = overwriteme

[pyramid]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    pyramid
    ${vars:egg}
interpreter = ${vars:interpreter}

[modwsgi]
recipe = collective.recipe.modwsgi
eggs = ${vars:egg}
config-file = ${buildout:directory}/production.ini

[template]
recipe = z3c.recipe.filetemplate
source-directory = .
exclude-directories = buildout
extends = vars

[modwsgi-patch]
recipe = collective.recipe.cmd:py
on_install = true
on_update = true
cmds =
    >>> import sys, fileinput
    >>> platform = sys.platform
    >>> src_dir = os.path.join(buildout.get('directory', '.'), 'buildout', 'parts', 'modwsgi', 'wsgi')
    >>> if platform == 'win32':
    >>>     for line in fileinput.input(src_dir, inplace=1):
    >>>             if line.startswith('configfile'):
    >>>                     print line.replace('\\', '/')
    >>>             else:
    >>>                     print line
    >>> fileinput.close()

[jsbuild]
recipe = JSTools:buildjs
resource-dir = ${buildout:directory}/jsbuild
# the following jsbuild config files must be written on
# one line, otherwise Paste will throw a syntax error
config = ${jsbuild:resource-dir}/app.cfg
output-dir = historic_cadastre/static/build
compress = True

[print-template]
recipe = collective.recipe.cmd:py
on_install = true
on_update = true
cmds =
    >>> from subprocess import call
    >>> from os.path import join
    >>> cmd = join('buildout', 'bin', 'print_tpl')
    >>> print 'calling ' + cmd
    >>> call([cmd])
uninstall_cmds =
    >>> from os import path, remove
    >>> fpath = path.join('print', 'templates', 'print.mako')
    >>> if path.isfile(fpath):
    >>> print 'removing ' + fpath
    >>> remove(fpath)

[print-war]
recipe = c2c.recipe.jarfile
mode = update
basewar = print-servlet-2.0-SNAPSHOT-IMG-MAGICK.war
basedir = print/
input = ${print-war:basewar}
    WEB-INF/classes/log4j.properties
    WEB-INF/classes/*.xml
    WEB-INF/classes/*.*
    config.yaml
    *.pdf
output = /srv/tomcat/tomcat1/webapps/print-${vars:instanceid}.war

# This patch is for nesitn3, which throws an error (unknown why) when running under wsgi
#  It throws the following error in the Apache log: AccessInit: hash collision: 3 for both 1 and 1
[pil_patch]
recipe = collective.recipe.cmd:py
on_install = true
on_update = true
cmds =
    >>> import os
    >>> src_dir = os.path.join(buildout.get('directory', '.'), 'buildout', 'parts', 'modwsgi', 'wsgi')
    >>> import fileinput
    >>> processing = False
    >>> for line in fileinput.input(src_dir, inplace=1):
    >>>     if line.startswith('import sys'):
    >>>             processing = True
    >>>     else:
    >>>             if processing:
    >>>                     print 'import PIL.Image'
    >>>                     print 'sys.modules[\'Images\'] = PIL.Image'
    >>>             processing = False
    >>>     print line
    >>> fileinput.close()